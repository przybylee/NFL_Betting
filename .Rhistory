t(vec)%*%Sig%*%vec
print(d1)
sqrt(t(vec)%*%Sig%*%vec)
print(d1)
A = sqrt(t(vec)%*%Sig%*%vec)
A[1,1]
A = sqrt(t(vec)%*%Sig%*%vec)[1,1]
#confidence interval for lm
conf_int.lm_sp=function(lmout,c,d=0,a){
c.sp <- Matrix(c, sparse = T)
b=Matrix(coef(lmout), sparse = T)
var.b <- Matrix(vcov(lmout), sparse = T)
X=Matrix(model.matrix(lmout), sparse = T)
df= nrow(X) - length(b)
cb.d=(c%*%b)[1,1]-d
#X.X <- t(X)%*%X
tquant <- qt(1-a/2,df)
std.dev = sqrt(t(c)%*%var.b%*%c)[1,1]
lower = cb.d - tquant*std.dev
upper = cb.d + tquant*std.dev
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
t0 = Sys.time()
d2 = conf_int.lm_sp(plyr.reg, c.lg1, a = 0.5)
tf - t0
t0 = Sys.time()
d2 = conf_int.lm_sp(plyr.reg, c.lg1, a = 0.5)
tf = Sys.time()
tf - t0
#This code takes about 1.5 minutes
print(d2)
print(d1)
HAplot
load("C:/Users/Lee/Box/Iowa State/Baseball/CSL Project 2019/DI_LeagueComparisons/ComparisonsWithMLB/ModelSelection.RData")
?gls
library(nlme)
?gls
setwd("C:/Users/Lee/Git Repos/NFL_Betting")
library(rvest)
library(dplyr)
library(readr)
#scrapes data from pro football reference
nfl_base <- "https://www.pro-football-reference.com/"
#teams involved from 2010 onward; we look for these specific strings
nfl_teams <- c("Green Bay Packers",
"Chicago Bears",
"Tennessee Titans",
"Cleveland Browns",
"Los Angeles Rams",
"Carolina Panthers",
"Washington Redskins",
"Washington Football Team",
"Philadelphia Eagles",
"Buffalo Bills",
"New York Jets",
"Atlanta Falcons",
"Minnesota Vikings",
"Baltimore Ravens",
"Miami Dolphins",
"Kansas City Chiefs",
"Jacksonville Jaguars",
"Cincinnati Bengals",
"Seattle Seahawks",
"Indianapolis Colts",
"Los Angeles Chargers",
"Las Vegas Raiders",
"San Francisco 49ers",
"Tampa Bay Buccaneers",
"New York Giants",
"Dallas Cowboys",
"Detroit Lions",
"Arizona Cardinals",
"Pittsburgh Steelers",
"New England Patriots",
"Houston Texans",
"New Orleans Saints",
"Denver Broncos",
"Oakland Raiders",
"St. Louis Rams",
"San Diego Chargers")
#total number of teams
l <- nchar(nfl_teams)
year_step <- 2009
score_step <- 3
scores <- c()
#AWAY TEAM SCORE APPEARS FIRST...
for (year in 2019:2020) {
for (week in 1:17) {
#manipulate base string to get a specific week in a specific season
date <- paste0("years/", year, "/week_", week, ".htm")
paste0(nfl_base, date) -> url
#execute string scrape
game <- read_html(url) %>%
html_node("#content") %>%
html_text()
#getting the teams that played during the current week
hold <- sapply(nfl_teams, regexpr, game)
played <- hold[hold > 0]
ord <- order(played)
#ordering teams that played; eliminates having to check entire list
played <- played[ord]
l_play <- l[hold > 0][ord]
#number of teams that played
n <- length(played)
#getting score information
day_data <- c()
if (n > 0) {
for (t in 1:n) {
#stepping through string
score_loc <- played[t] + l_play[t] + score_step
#collecting scores... plus garbage
score_text <- substr(game, score_loc, score_loc + 3)
#read score
score <- readr::parse_number(score_text)
#add to weekly data frame
new <- c(names(played)[t], score, year, week)
day_data <- rbind(day_data, new)
}
}
#add to entire list of scores
scores <- rbind(scores, day_data)
}
}
View(scores)
scores <- scores[!is.na(scores[,2]),]
View(scores)
#write to csv file
scores <- as.data.frame(scores)
names(scores) <- c("Team", "Score", "Year", "Week")
head(scores)
summary(scores)
write.csv(scores, "nfl_scores_2019_2020.csv")
#Build a linear model to predict game outcomes, specifically the margin of victory for the home team
#Lee Przybylski 9/22/2020
library(MASS)
library(Matrix)
library(dplyr)
options(stringsAsFactors = FALSE)
games <- read.csv("nfl_scores_2019_2020.csv", sep = ",")
head(games)
games$X <- NULL
unique(games$Team)
teams <-sort(unique(games$Team))
teams
summary(games)
#We have scores from every game, given as away team then home team.
N = length(games$Score)
games[games$Team == "Washington Redskins","Team"] <- "Washington Football Team"
games[games$Team == "Oakland Raiders","Team"] <- "Las Vegas Raiders"
M = length(unique(games$Team))
X = matrix(data = 0, nrow = N/2, ncol = M+1)
teams <-sort(unique(games$Team))
teams
colnames(X) <- c("home", teams)
Y <- rep(0, N/2)
row = 1
for(n in seq(2,N, by = 2)){
X[row,"home"] <- 1
X[row, games$Team[n-1]] <- -1
X[row, games$Team[n]] <- 1
Y[row] <- games$Score[n] - games$Score[n-1]
row <- row +1
}
ha_reg1 <- lm(Y ~ X+0)
summary(ha_reg1)
#Find a confidence interval
#Requires model matrix X, observations y, estimated line d, and confidence level a
conf_int=function(X,y,c,d=0,a=0.05){
reg <- lm(y ~ X+0)
c = as.matrix(c)
X.X <- t(X)%*%X
df = nrow(X) - anova(reg)[1,1]
#df= nrow(X) - rankMatrix(X)[1]
cb.d=t(c)%*%ginv(X.X)%*%t(X)%*%y-d
sigsq <- anova(reg)[2,3]
var.cb <- sigsq*t(c)%*%ginv(X.X)%*%c
tquant <- qt(1-a/2,df)
std.dev = sqrt(var.cb)
lower = cb.d - tquant%*%std.dev
upper = cb.d + tquant%*%std.dev
data.frame(est = cb.d, std.dev = std.dev, lower = lower, upper = upper)
}
HomeTm = "New England Patriots"
AwayTm = "Las Vegas Raiders"
#Enter the moneyline
line_away <- 108
line_home <- -125
colnames(X)
c <- c(1,rep(0, length(teams)))
c[colnames(X) == HomeTm] <- 1
c[colnames(X) == AwayTm] <- -1
#Put contrast vector c into confint to estimate HomeTm score - AwayTm score
conf_int(X, y = Y, c = c, d = 0, a = 0.05)
#Using the estimated difference in team effects, compute a win probability
mu <- conf_int(X, y = Y, c = c, d = 0, a = 0.05)[1,1]
sigma <- sqrt(sigsq <- anova(lm(Y ~ X+0))[2,3])
AwayProb <- pnorm(0,mean = mu, sd = sigma)
HomeProb <- pnorm(0,mean = mu, sd = sigma, lower.tail = FALSE)
print(paste("The estimated win probability for the ", AwayTm, "at", HomeTm, "is", AwayProb, sep = " " ))
#Compute the expected winnings for a $100 bet
#Payouts for away then home
line <- c(line_away, line_home)
payouts <- c(100,100)
for(j in 1:2){
l <- line[j]
if (l < 0){
payouts[j] <- 100/-l
}else{
payouts[j] <- l
}
}
payouts <- c(100,100)
for(j in 1:2){
l <- line[j]
if (l < 0){
payouts[j] <- 100^2/-l
}else{
payouts[j] <- l
}
}
exp_away <- AwayProb*payouts[1] - 100*HomeProb
exp_home <- Homeprob*payouts[2] - 100*AwayProb
exp_home <- HomeProb*payouts[2] - 100*AwayProb
print(paste("Exp winnings for", AwayTm, "is", exp_away, sep = " "))
print(paste("Exp winnings for", HomeTm, "is", exp_home, sep = " "))
#Name home team and away team to estimate difference in team effects plus home advantage
teams
HomeTm = "Atlanta Falcons"
AwayTm = "Carolina Panthers"
#Enter the moneyline
line_away <- 108
line_home <- -126
colnames(X)
#colnames(X)
c <- c(1,rep(0, length(teams)))
c[colnames(X) == HomeTm] <- 1
c[colnames(X) == AwayTm] <- -1
#Put contrast vector c into confint to estimate HomeTm score - AwayTm score
conf_int(X, y = Y, c = c, d = 0, a = 0.05)
#Using the estimated difference in team effects, compute a win probability
mu <- conf_int(X, y = Y, c = c, d = 0, a = 0.05)[1,1]
sigma <- sqrt(sigsq <- anova(lm(Y ~ X+0))[2,3])
AwayProb <- pnorm(0,mean = mu, sd = sigma)
HomeProb <- pnorm(0,mean = mu, sd = sigma, lower.tail = FALSE)
print(paste("The estimated win probability for the ", AwayTm, "at", HomeTm, "is", AwayProb, sep = " " ))
#Compute the expected winnings for a $100 bet
#Payouts for away then home
line <- c(line_away, line_home)
payouts <- c(100,100)
for(j in 1:2){
l <- line[j]
if (l < 0){
payouts[j] <- 100^2/-l
}else{
payouts[j] <- l
}
}
exp_away <- AwayProb*payouts[1] - 100*HomeProb
exp_home <- HomeProb*payouts[2] - 100*AwayProb
print(paste("Exp winnings for", AwayTm, "is", exp_away, sep = " "))
print(paste("Exp winnings for", HomeTm, "is", exp_home, sep = " "))
#Here is some code to plot the curve
spread <- 2.5
x <- seq(-30,30)
y <- dnorm(x, mean = mu, sd = sigma)
title = paste("Spread =", spread, "Prediction =", round(mu,2), "std. eror =", round(sigma,2), sep = " ")
plot(x,y, type = "l", xlab = paste(HomeTm, "margin of victory", sep = " "), ylab = "Normal Density", main= title)
abline(v = mu, col = "red")
abline(v = 3, col = "green")
abline(v = 0, lty = "dashed")
spread <- 2.5
#Here is some code to plot the curve
x <- seq(-30,30)
y <- dnorm(x, mean = mu, sd = sigma)
title = paste("Spread =", spread, "Prediction =", round(mu,2), "std. eror =", round(sigma,2), sep = " ")
plot(x,y, type = "l", xlab = paste(HomeTm, "margin of victory", sep = " "), ylab = "Normal Density", main= title)
abline(v = mu, col = "red")
abline(v = spread, col = "green")
AwayTm = "Atlanta Falcons"
HomeTm = "Carolina Panthers"
#Enter the moneyline
line_away <- 108
line_home <- -126
spread <- 2.5
#colnames(X)
c <- c(1,rep(0, length(teams)))
c[colnames(X) == HomeTm] <- 1
c[colnames(X) == AwayTm] <- -1
#Put contrast vector c into confint to estimate HomeTm score - AwayTm score
conf_int(X, y = Y, c = c, d = 0, a = 0.05)
#Using the estimated difference in team effects, compute a win probability
mu <- conf_int(X, y = Y, c = c, d = 0, a = 0.05)[1,1]
sigma <- sqrt(sigsq <- anova(lm(Y ~ X+0))[2,3])
AwayProb <- pnorm(0,mean = mu, sd = sigma)
HomeProb <- pnorm(0,mean = mu, sd = sigma, lower.tail = FALSE)
print(paste("The estimated win probability for the ", AwayTm, "at", HomeTm, "is", AwayProb, sep = " " ))
#Compute the expected winnings for a $100 bet
#Payouts for away then home
line <- c(line_away, line_home)
payouts <- c(100,100)
for(j in 1:2){
l <- line[j]
if (l < 0){
payouts[j] <- 100^2/-l
}else{
payouts[j] <- l
}
}
exp_away <- AwayProb*payouts[1] - 100*HomeProb
exp_home <- HomeProb*payouts[2] - 100*AwayProb
print(paste("Exp winnings for", AwayTm, "is", exp_away, sep = " "))
print(paste("Exp winnings for", HomeTm, "is", exp_home, sep = " "))
#Here is some code to plot the curve
x <- seq(-30,30)
y <- dnorm(x, mean = mu, sd = sigma)
title = paste("Spread =", spread, "Prediction =", round(mu,2), "std. eror =", round(sigma,2), sep = " ")
plot(x,y, type = "l", xlab = paste(HomeTm, "margin of victory", sep = " "), ylab = "Normal Density", main= title)
abline(v = mu, col = "red")
abline(v = spread, col = "green")
abline(v = 0, lty = "dashed")
#What is the probability of the home team beating the spread?
spreadprob <- pnorm(spread, mean = mu, sd = sigma, lower.tail = FALSE)
print(paste("The prob of", HomeTm, "beating the spread is", round(spreadprob, 4), sep = " "))
AwayTm = "Atlanta Falcons"
HomeTm = "Carolina Panthers"
#Enter the moneyline
line_away <- 108
line_home <- -126
spread <- 2.5
#colnames(X)
c <- c(1,rep(0, length(teams)))
c[colnames(X) == HomeTm] <- 1
c[colnames(X) == AwayTm] <- -1
#Put contrast vector c into confint to estimate HomeTm score - AwayTm score
conf_int(X, y = Y, c = c, d = 0, a = 0.05)
#Using the estimated difference in team effects, compute a win probability
mu <- conf_int(X, y = Y, c = c, d = 0, a = 0.05)[1,1]
sigma <- sqrt(sigsq <- anova(lm(Y ~ X+0))[2,3])
HomeProb <- pnorm(0,mean = mu, sd = sigma, lower.tail = FALSE)
print(paste("The estimated win probability for the ", AwayTm, "at", HomeTm, "is", AwayProb, sep = " " ))
AwayProb <- pnorm(0,mean = mu, sd = sigma)
#Compute the expected winnings for a $100 bet
#Payouts for away then home
line <- c(line_away, line_home)
payouts <- c(100,100)
for(j in 1:2){
l <- line[j]
if (l < 0){
payouts[j] <- 100^2/-l
}else{
payouts[j] <- l
}
}
exp_away <- AwayProb*payouts[1] - 100*HomeProb
exp_home <- HomeProb*payouts[2] - 100*AwayProb
print(paste("Exp winnings for", AwayTm, "is", exp_away, sep = " "))
print(paste("The estimated win probability for the ", AwayTm, "at", HomeTm, "is", AwayProb, sep = " " ))
AwayTm = "Chicago Bears"
HomeTm = "New Orleans Saints"
#Enter the moneyline
line_away <- 108
line_home <- -126
spread <- 2.5
#colnames(X)
c <- c(1,rep(0, length(teams)))
c[colnames(X) == HomeTm] <- 1
c[colnames(X) == AwayTm] <- -1
#Put contrast vector c into confint to estimate HomeTm score - AwayTm score
conf_int(X, y = Y, c = c, d = 0, a = 0.05)
#Using the estimated difference in team effects, compute a win probability
mu <- conf_int(X, y = Y, c = c, d = 0, a = 0.05)[1,1]
sigma <- sqrt(sigsq <- anova(lm(Y ~ X+0))[2,3])
AwayProb <- pnorm(0,mean = mu, sd = sigma)
HomeProb <- pnorm(0,mean = mu, sd = sigma, lower.tail = FALSE)
print(paste("The estimated win probability for the ", AwayTm, "at", HomeTm, "is", AwayProb, sep = " " ))
AwayTm = "Las Vegas Raiders"
HomeTm = "Cleveland Browns"
#Enter the moneyline
line_away <- 108
line_home <- -126
spread <- 2.5
#colnames(X)
c <- c(1,rep(0, length(teams)))
c[colnames(X) == HomeTm] <- 1
c[colnames(X) == AwayTm] <- -1
#Put contrast vector c into confint to estimate HomeTm score - AwayTm score
conf_int(X, y = Y, c = c, d = 0, a = 0.05)
#Using the estimated difference in team effects, compute a win probability
mu <- conf_int(X, y = Y, c = c, d = 0, a = 0.05)[1,1]
sigma <- sqrt(sigsq <- anova(lm(Y ~ X+0))[2,3])
AwayProb <- pnorm(0,mean = mu, sd = sigma)
HomeProb <- pnorm(0,mean = mu, sd = sigma, lower.tail = FALSE)
print(paste("The estimated win probability for the ", AwayTm, "at", HomeTm, "is", AwayProb, sep = " " ))
AwayTm = "New England Patriots"
HomeTm = "Buffalo Bills"
#Enter the moneyline
line_away <- 108
line_home <- -126
spread <- 2.5
#colnames(X)
c <- c(1,rep(0, length(teams)))
c[colnames(X) == HomeTm] <- 1
c[colnames(X) == AwayTm] <- -1
#Put contrast vector c into confint to estimate HomeTm score - AwayTm score
conf_int(X, y = Y, c = c, d = 0, a = 0.05)
#Using the estimated difference in team effects, compute a win probability
mu <- conf_int(X, y = Y, c = c, d = 0, a = 0.05)[1,1]
sigma <- sqrt(sigsq <- anova(lm(Y ~ X+0))[2,3])
AwayProb <- pnorm(0,mean = mu, sd = sigma)
HomeProb <- pnorm(0,mean = mu, sd = sigma, lower.tail = FALSE)
print(paste("The estimated win probability for the ", AwayTm, "at", HomeTm, "is", AwayProb, sep = " " ))
source("C:/Users/przyb/GitRepos/NFL_Betting/scrape.R")
games <- scrape_games(ssn = 2021, wk_stop = 17)
head(games)
tail(games)
games <- scrape_games(ssn = 2021, wk_stop = 3)
head(games)
tail(games)
scrape_games <- function(ssn = 2021, wk_st = 1, wk_stop){
date_list <- c()
#year_step <- 2009
score_step <- 3
scores <- c()
for (year in 2021:2021) {
for (week in 1:wk_stop) {
#manipulate base string to get a specific week in a specific season
date <- paste0("years/", year, "/week_", week, ".htm")
paste0(nfl_base, date) -> url
#execute string scrape
game <- read_html(url) %>%
html_node("#content") %>%
html_text()
#getting the teams that played during the current week
hold <- sapply(nfl_teams, regexpr, game)
played <- hold[hold > 0]
ord <- order(played)
#ordering teams that played; eliminates having to check entire list
played <- played[ord]
l_play <- l[hold > 0][ord]
#number of teams that played
n <- length(played)
#getting score information
day_data <- c()
if (n > 0) {
for (t in 1:n) {
#stepping through string
score_loc <- played[t] + l_play[t] + score_step
#collecting scores... plus garbage
score_text <- substr(game, score_loc, score_loc + 3)
#read score
score <- readr::parse_number(score_text)
#add to weekly data frame
new <- c(names(played)[t], score, year, week)
day_data <- rbind(day_data, new)
}
}
#add to entire list of scores
scores <- rbind(scores, day_data)
}
}
scores <- as.data.frame(scores)
names(scores) <- c("Team", "Score", "Year", "Week")
scores <- scores[!is.na(scores$Score),]
return(scores)
}
games <- scrape_games(ssn = 2021, wk_stop = 17)
head(games)
tail(games)
games <- scrape_games(ssn = 2021, wk_stop = 20)
head(games)
tail(games)
games <- scrape_games(ssn = 2021, wk_stop = 17)
head(games)
tail(games)
write.csv(games, "nfl_scores_2021.csv")
head(games)
teams <-sort(unique(games$Team))
games <- read.csv("nfl_scores_2021.csv")
head(games)
teams <-sort(unique(games$Team))
teams
library(dplyr)
options(stringsAsFactors = FALSE)
head(games)
games$X <- NULL
unique(games$Team)
teams <-sort(unique(games$Team))
teams
summary(games)
#We have scores from every game, given as away team then home team.
N = length(games$Score)
games[games$Team == "Washington Redskins","Team"] <- "Washington Football Team"
games[games$Team == "Oakland Raiders","Team"] <- "Las Vegas Raiders"
M = length(unique(games$Team))
X = matrix(data = 0, nrow = N/2, ncol = M+1)
teams <-sort(unique(games$Team))
teams
colnames(X) <- c("home", teams)
Y <- rep(0, N/2)
row = 1
for(n in seq(2,N, by = 2)){
X[row,"home"] <- 1
X[row, games$Team[n-1]] <- -1
X[row, games$Team[n]] <- 1
Y[row] <- games$Score[n] - games$Score[n-1]
row <- row +1
}
ha_reg1 <- lm(Y ~ X+0)
summary(ha_reg1)
rownames(X)
colnames(X)
tail(X)
